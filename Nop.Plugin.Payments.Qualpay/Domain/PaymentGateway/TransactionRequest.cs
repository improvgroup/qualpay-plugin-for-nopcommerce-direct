using System.Collections.Generic;
using System.Net;
using Newtonsoft.Json;

namespace Nop.Plugin.Payments.Qualpay.Domain.PaymentGateway
{
    /// <summary>
    /// Represents Qualpay Payment Gateway request to create transaction
    /// </summary>
    public class TransactionRequest : PaymentCardRequest
    {
        #region Properties

        /// <summary>
        /// Gets or sets a type of transaction.
        /// </summary>
        [JsonIgnore]
        public TransactionType TransactionType { get; set; }

        /// <summary>
        /// Gets or sets a unique identifier generated by the payment gateway for each transaction. 
        /// </summary>
        [JsonProperty(PropertyName = "pg_id")]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or sets an amount of convenience fee. A convenience fee is a fee charged for the \"convenience\" of being able to pay using an alternative payment channel outside the merchant's customary payment channel and must be a flat/fixed fee amount per transaction. This field tracks the convenience fee amount for display purposes, but the amount of the fee must be included in amt_tran.
        /// </summary>
        [JsonProperty(PropertyName = "amt_convenience_fee")]
        public double? AmountConvenienceFee { get; set; }

        /// <summary>
        /// Gets or sets a total amount of transaction transferred to the FBO account.
        /// </summary>
        [JsonProperty(PropertyName = "amt_fbo")]
        public double? AmountFbo { get; set; }

        /// <summary>
        /// Gets or sets an amount of sales tax included in the total transaction amount. Required for Level 2 and Level 3 interchange qualification.
        /// </summary>
        [JsonProperty(PropertyName = "amt_tax")]
        public double? AmountTax { get; set; }

        /// <summary>
        /// Gets or sets the total amount of the transaction including sales tax (if applicable).
        /// </summary>
        [JsonProperty(PropertyName = "amt_tran")]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or sets an amount of transaction surcharge fee. A surcharge is a fee added to the cost of a purchase for the \"privilege\" of using a credit card, and can be a percentage of the transaction amount. This field tracks the surcharge amount of the transaction for display purposes, but the amount of the fee must be included in amt_tran.
        /// </summary>
        [JsonProperty(PropertyName = "amt_tran_fee")]
        public double? AmountTranFee { get; set; }

        /// <summary>
        /// Gets or sets an authorization code. It is required for a force request, and should contain the 6-character authorization code that was received during a voice or ARU authoirzation.
        /// </summary>
        [JsonProperty(PropertyName = "auth_code")]
        public string AuthorizationCode { get; set; }

        /// <summary>
        /// Gets or sets a customer. In an authorization, credit, force, sale or verify message the merchant can send tokenize (set to true), either card_number or card_swipe, the desired customer_id, and the customer field and the payment gateway will create the customer data in the vault. Cannot be used to update an existing customer_id
        /// </summary>
        [JsonProperty(PropertyName = "customer")]
        public PaymentGatewayCustomer Customer { get; set; }

        /// <summary>
        /// Gets or sets a reference code supplied by the cardholder to the merchant.
        /// </summary>
        [JsonProperty(PropertyName = "customer_code")]
        public string CustomerCode { get; set; }

        /// <summary>
        /// Gets or sets a customer emails. Must contain comma-separated list of e-mail addresses to which a receipt should be sent.
        /// </summary>
        [JsonProperty(PropertyName = "customer_email")]
        public string CustomerEmail { get; set; }

        /// <summary>
        /// Gets or sets a value established by the merchant. This value may be used in place of a card number in requests requiring cardholder account data.
        /// </summary>
        [JsonProperty(PropertyName = "customer_id")]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or sets a DBA name used in the authorization and clearing messages, when the merchant has been authorized to send dynamic DBA information. Note: the payment gateway will automatically add a prefix plus an asterisk (*) to the dba_name value. For example, if the prefix is ABC and the dba_name value is SHOE CO, the DBA name will show as \"ABC*SHOE CO\" on the cardholder's credit card statement.
        /// </summary>
        [JsonProperty(PropertyName = "dba_name")]
        public string DbaName { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether a transaction receipt will be sent via e-mail to the address(es) provided in the customer_email field. When this field is provided and set to true, a customer_email must also be provided.
        /// </summary>
        [JsonProperty(PropertyName = "email_receipt")]
        public bool? SendEmailReceipt { get; set; }

        /// <summary>
        /// Gets or sets a "For Benefit Of" (FBO) account identifier on the Qualpay system.
        /// </summary>
        [JsonProperty(PropertyName = "fbo_id")]
        public long? FboId { get; set; }

        /// <summary>
        /// Gets or sets a JSON array of JSON objects. Each object represents a single line item detail element related to the transaction. Each detail element has required subfields: quantity (7N), description (26AN), unit_of_measure (12AN), product_code (12AN), debit_credit_ind (1 AN), unit_cost (12,2N). Optional subfields: type_of_supply (2AN), commodity code (12AN)
        /// </summary>
        [JsonProperty(PropertyName = "line_items")]
        public IEnumerable<LineItem> Items { get; set; }

        /// <summary>
        /// Gets or sets a MasterCard UCAF Field Data returned from the merchants 3DS MPI (Base64 encoded).
        /// </summary>
        [JsonProperty(PropertyName = "mc_ucaf_data")]
        public string MasterCardUcafData { get; set; }

        /// <summary>
        /// Gets or sets a MasterCard UCAF Collection Indicator returned from the merchants 3DS MPI.
        /// </summary>
        [JsonProperty(PropertyName = "mc_ucaf_ind")]
        public string MasterCardUcafIndicator { get; set; }

        /// <summary>
        /// Gets or sets a reference value that will be stored with the transaction data and included with transaction data in reports within Qualpay Manager. This value will also be attached to any lifecycle transactions (e.g. retrieval requests and chargebacks) that may occur.
        /// </summary>
        [JsonProperty(PropertyName = "merch_ref_num")]
        public string MerchantReferenceInfo { get; set; }

        /// <summary>
        /// Gets or sets the Mail Order Telephone Order (MOTO) transaction type.
        /// </summary>
        [JsonProperty(PropertyName = "moto_ecomm_ind")]
        public MotoTransactionType MotoTransactionType { get; set; }

        /// <summary>
        /// Gets or sets a purchase identifier (also referred to as the invoice number generated by the merchant).
        /// </summary>
        [JsonProperty(PropertyName = "purchase_id")]
        public string PurchaseId { get; set; }

        /// <summary>
        /// Gets or sets an identifier of recurring subscription that applies to this transaction.
        /// </summary>
        [JsonProperty(PropertyName = "subscription_id")]
        public long? SubscriptionId { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the payment gateway will store the cardholder data in the Card Vault and provide a card_id in the repsonse in an authorization, credit, force, sale, or verify requests. If the card_number or card_id in the request is already in the Card Vault, this flag instructs the payment gateway to update the associated data (e.g. avs_address, avs_zip, exp_date) if present.
        /// </summary>
        [JsonProperty(PropertyName = "tokenize")]
        public bool? IsTokenize { get; set; }

        /// <summary>
        /// Gets or sets the ISO numeric currency code for the transaction. 
        /// </summary>
        [JsonProperty(PropertyName = "tran_currency")]
        public int CurrencyIsoCode { get; set; }

        /// <summary>
        /// Gets or sets a CAVV returned from the merchants 3DS MPI (Base64 encoded).
        /// </summary>
        [JsonProperty(PropertyName = "cavv_3ds")]
        public string Cavv3ds { get; set; }

        /// <summary>
        /// Gets or sets a transaction ID (XID) returned from the merchants 3DS MPI (Base64 encoded).
        /// </summary>
        [JsonProperty(PropertyName = "xid_3ds")]
        public string Xid3ds { get; set; }

        #endregion

        #region Methods

        /// <summary>
        /// Get a request path
        /// </summary>
        /// <returns>Request path</returns>
        public override string GetRequestPath() => $"pg/{(TransactionType == TransactionType.Authorization ? "auth" : TransactionType == TransactionType.Sale ? "sale" : string.Empty)}";

        /// <summary>
        /// Get a request method
        /// </summary>
        /// <returns>Request method</returns>
        public override string GetRequestMethod() => WebRequestMethods.Http.Post;

        #endregion
    }
}