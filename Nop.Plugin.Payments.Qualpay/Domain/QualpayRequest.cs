using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Nop.Plugin.Payments.Qualpay.Domain
{
    #region Request

    /// <summary>
    /// Represents request to the Qualpay payment gateway 
    /// </summary>
    public class QualpayRequest
    {
        /// <summary>
        /// Gets or sets a Qualpay merchant identifier. 
        /// </summary>
        [JsonProperty(PropertyName = "merchant_id")]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or sets a Qualpay security key. 
        /// </summary>
        [JsonProperty(PropertyName = "security_key")]
        public string SecurityKey { get; set; }

        /// <summary>
        /// Gets or sets a location identifier. When a merchant has more than one location using the same currency, this value is used to identify the specific location
        /// </summary>
        [JsonProperty(PropertyName = "loc_id")]
        public string LocationId { get; set; }

        /// <summary>
        /// Gets or sets a value received from a tokenization request. This value may be used in place of a card number in messages requiring cardholder account data. 
        /// </summary>
        [JsonProperty(PropertyName = "card_id")]
        public string CardId { get; set; }

        /// <summary>
        /// Gets or sets a value established by the merchant. This value may be used in place of a card number in messages requiring cardholder account data.
        /// </summary>
        [JsonProperty(PropertyName = "customer_id")]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or sets a customer card number
        /// </summary>
        [JsonProperty(PropertyName = "card_number")]
        public string CardNumber { get; set; }

        /// <summary>
        /// Gets or sets a customer card expiration date in MMYY format
        /// </summary>
        [JsonProperty(PropertyName = "exp_date")]
        public string ExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets track 1 or track 2 magnetic stripe data.
        /// </summary>
        [JsonProperty(PropertyName = "card_swipe")]
        public string CardSwipe { get; set; }

        /// <summary>
        /// Gets or sets a cardholder name
        /// </summary>
        [JsonProperty(PropertyName = "cardholder_name")]
        public string CardholderName { get; set; }

        /// <summary>
        /// Gets or sets a the CVV2 or CID value from the signature panel on the back of the credit card.
        /// </summary>
        [JsonProperty(PropertyName = "cvv2")]
        public string Cvv2 { get; set; }

        /// <summary>
        /// Gets or sets the zip code of the cardholder. If present, it will be included in the authorization message sent to the issuing bank.
        /// </summary>
        [JsonProperty(PropertyName = "avs_zip")]
        public string AvsZipCode { get; set; }

        /// <summary>
        /// Gets or sets the street address of the cardholder. If present, it will be included in the authorization message sent to the issuing bank.
        /// </summary>
        [JsonProperty(PropertyName = "avs_address")]
        public string AvsAddress { get; set; }

        /// <summary>
        /// Gets or sets a unique identifier generated by the payment gateway for each transaction. 
        /// </summary>
        [JsonProperty(PropertyName = "pg_id")]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether is allowed for approval of a partial amount.This would be used to allow a merchant to accept a partial payment from a pre-paid gift card.
        /// </summary>
        [JsonProperty(PropertyName = "partial_auth")]
        public bool EnablePartialAuthorization { get; set; }

        /// <summary>
        /// Gets or sets the total amount of the transaction including sales tax (if applicable).
        /// </summary>
        [JsonProperty(PropertyName = "amt_tran")]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or sets the ISO numeric currency code for the transaction. 
        /// </summary>
        [JsonProperty(PropertyName = "tran_currency")]
        public int CurrencyIsoCode { get; set; }

        /// <summary>
        /// Gets or sets the total tax amount of the transaction 
        /// </summary>
        [JsonProperty(PropertyName = "amt_tax")]
        public decimal TaxAmount { get; set; }

        /// <summary>
        /// Gets or sets a purchase identifier (or invoice number). 
        /// </summary>
        [JsonProperty(PropertyName = "purchase_id")]
        public string PurchaseId { get; set; }

        /// <summary>
        /// Gets or sets a reference code supplied by the cardholder to the merchant.
        /// </summary>
        [JsonProperty(PropertyName = "customer_code")]
        public string CustomerCode { get; set; }

        /// <summary>
        /// Gets or sets a reference value that will be stored with the transaction data and will be included with the transaction data reported in the Qualpay Manager.
        /// </summary>
        [JsonProperty(PropertyName = "merch_ref_num")]
        public string MerchantReferenceInfo { get; set; }

        /// <summary>
        /// Gets or sets the authorization code. This field is required when the merchant is sending a force message to the payment gateway.
        /// </summary>
        [JsonProperty(PropertyName = "auth_code")]
        public string AuthorizationCode { get; set; }

        /// <summary>
        /// Gets or sets the Mail Order Telephone Order (MOTO) transaction type.
        /// </summary>
        [JsonProperty(PropertyName = "moto_ecomm_ind")]
        public MotoTransactionType MotoTransactionType { get; set; }

        /// <summary>
        /// Gets or sets the DBA name used in the authorization and clearing messages. (When the merchant has been authorized to send dynamic DBA information)
        /// </summary>
        [JsonProperty(PropertyName = "dba_name")]
        public string DbaName { get; set; }

        /// <summary>
        /// Gets or sets the city or phone data used in the authorization and clearing messages. (When the merchant has been authorized to send dynamic DBA information)
        /// </summary>
        [JsonProperty(PropertyName = "merch_city_ph")]
        public string MerchantCityOrPhone { get; set; }

        /// <summary>
        /// Gets or sets the customer service phone number used in the clearing message. (When the merchant has been authorized to send dynamic DBA information)
        /// </summary>
        [JsonProperty(PropertyName = "merch_phone_cs")]
        public string MerchantServicePhone { get; set; }

        /// <summary>
        /// Gets or sets the state used in the authorization and clearing messages. (When the merchant has been authorized to send dynamic DBA information)
        /// </summary>
        [JsonProperty(PropertyName = "merch_sate")]
        public string MerchantState{ get; set; }

        /// <summary>
        /// Gets or sets the zip code used in the authorization and clearing messages. (When the merchant has been authorized to send dynamic DBA information)
        /// </summary>
        [JsonProperty(PropertyName = "merch_zip")]
        public string MerchantZipCode { get; set; }

        /// <summary>
        /// Gets or sets the collection of line items
        /// </summary>
        [JsonProperty(PropertyName = "line_items")]
        public LineItem[] Items { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether the payment gateway should store the cardholder data in the vault and provide a card_id in the response message.
        /// </summary>
        [JsonProperty(PropertyName = "tokenize")]
        public bool IsTokenize { get; set; }

        /// <summary>
        /// Gets or sets the customer details that will be stored in the vault. Used, when IsTokenize is enabled
        /// </summary>
        [JsonProperty(PropertyName = "customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// Gets or sets the collection of field data that will be echoed back in the response message.
        /// </summary>
        [JsonProperty(PropertyName = "echo_fields")]
        public KeyValuePair<string, string>[] CustomFields { get; set; }

        /// <summary>
        /// Gets or sets the collection of field data that will be included with the transaction data reported in Qualpay Manager.
        /// </summary>
        [JsonProperty(PropertyName = "report_data")]
        public KeyValuePair<string, string>[] CustomReportFields { get; set; }

        /// <summary>
        /// Gets or sets the field contains a merchant generated number used to identify the request. This value must be unique within the last 24 hours.
        /// </summary>
        [JsonProperty(PropertyName = "retry_id")]
        public int? RetryId { get; set; }

        /// <summary>
        /// Gets or sets a number greater than 0. When the value is 1, the payment gateway treats the message as a new message. If the value is greater than 1, then the payment gateway will return the result of the original message.
        /// </summary>
        [JsonProperty(PropertyName = "retry_attempt")]
        public int? RetryAttempt { get; set; }

        /// <summary>
        /// Gets or sets the payment solution name you are connecting the Qualpay API
        /// </summary>
        [JsonProperty(PropertyName = "developer_id")]
        public string DeveloperId { get; set; }
    }

    /// <summary>
    /// Represents a single line item
    /// </summary>
    public class LineItem
    {
        /// <summary>
        /// Gets or sets the count of items 
        /// </summary>
        [JsonProperty(PropertyName = "quantity")]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or sets the description of item
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the unit of measure (e.g.inches)
        /// </summary>
        [JsonProperty(PropertyName = "unit_of_measure")]
        public string MeasureUnit { get; set; }

        /// <summary>
        /// Gets or sets the product code or SKU number
        /// </summary>
        [JsonProperty(PropertyName = "product_code")]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or sets the credit type
        /// </summary>
        [JsonProperty(PropertyName = "debit_credit_ind")]
        [JsonConverter(typeof(StringEnumConverter))]
        public ItemCreditType CreditType { get; set; }
        
        /// <summary>
        /// Gets or sets the cost per unit
        /// </summary>
        [JsonProperty(PropertyName = "unit_cost")]
        public decimal UnitPrice { get; set; }

        /// <summary>
        /// Gets or sets the type of supply (Visa only)
        /// </summary>
        [JsonProperty(PropertyName = "type_of_supply ")]
        public string SupplyType { get; set; }

        /// <summary>
        /// Gets or sets the code used to categorize purchased item (Visa only)
        /// </summary>
        [JsonProperty(PropertyName = "commodity_code ")]
        public string CommodityCode { get; set; }
    }

    /// <summary>
    /// Represents the customer information 
    /// </summary>
    public class Customer
    {
        /// <summary>
        /// Gets or sets the customer first name included in the request.
        /// </summary>
        [JsonProperty(PropertyName = "customer_first_name")]
        public string CustomerFirstName { get; set; }

        /// <summary>
        /// Gets or sets the customer last name included in the request..
        /// </summary>
        [JsonProperty(PropertyName = "customer_last_name")]
        public string CustomerLastName { get; set; }

        /// <summary>
        /// Gets or sets the customer email address included in the request.. 
        /// </summary>
        [JsonProperty(PropertyName = "customer_email")]
        public string CustomerEmail { get; set; }

        /// <summary>
        /// Gets or sets the customer phone number.
        /// </summary>
        [JsonProperty(PropertyName = "customer_phone")]
        public string CustomerPhone { get; set; }
    }

    /// <summary>
    /// Represents enumeration of Mail Order Telephone Order (MOTO) transaction types
    /// </summary>
    public enum MotoTransactionType
    {
        /// <summary>
        /// Cardholder present
        /// </summary>
        Default = 0,

        /// <summary>
        /// One Time MOTO transaction
        /// </summary>
        OneTime = 1,

        /// <summary>
        /// Recurring 
        /// </summary>
        Recurring = 2,

        /// <summary>
        /// Installment
        /// </summary>
        Installment = 3,

        /// <summary>
        /// Full 3D-Secure transaction
        /// </summary>
        Full3DSecure = 5,

        /// <summary>
        /// Merchant 3D-Secure transaction
        /// </summary>
        Merchant3DSecure = 6,

        /// <summary>
        /// e-Commerce Channel Encrypted (SSL)
        /// </summary>
        Ssl = 7
    }

    /// <summary>
    /// Represents enumeration of item credit types
    /// </summary>
    public enum ItemCreditType
    {
        /// <summary>
        /// Debit (sold)
        /// </summary>
        [EnumMember(Value = "D")]
        Debit,

        /// <summary>
        /// Credit (refunded)
        /// </summary>
        [EnumMember(Value = "C")]
        Credit
    }

    #endregion

    #region Response

    /// <summary>
    /// Represents Qualpay payment gateway response
    /// </summary>
    public class QualpayResponse
    {
        /// <summary>
        /// Gets or sets a unique identifier generated by the payment gateway for each transaction. 
        /// </summary>
        [JsonProperty(PropertyName = "pg_id")]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or sets the response code from the Qualpay payment gateway
        /// </summary>
        [JsonProperty(PropertyName = "rcode")]
        [JsonConverter(typeof(StringEnumConverter))]
        public ResponseCode ResponseCode { get; set; }

        /// <summary>
        /// Gets or sets the response message text from the payment gateway application.
        /// </summary>
        [JsonProperty(PropertyName = "rmsg")]
        public string ResponseMessage { get; set; }

        /// <summary>
        /// Gets or sets a field is returned by the tokenize message or when an authorization or sale message requests tokenization of the cardholder data.
        /// </summary>
        [JsonProperty(PropertyName = "card_id")]
        public string CardId { get; set; }

        /// <summary>
        /// Gets or sets field is returned when the message was sent to the card issuer for approval.
        /// </summary>
        [JsonProperty(PropertyName = "auth_code")]
        public string AuthorizationCode { get; set; }

        /// <summary>
        /// Gets or sets the result from the card issuer.
        /// </summary>
        [JsonProperty(PropertyName = "auth_cvv2_result")]
        public string Cvv2Result { get; set; }

        /// <summary>
        /// Gets or sets the result from the card issuer.
        /// </summary>
        [JsonProperty(PropertyName = "auth_avs_result")]
        public string AvsResult { get; set; }

        /// <summary>
        /// Gets or sets the collection of field data that will be echoed back in the response message.
        /// </summary>
        [JsonProperty(PropertyName = "echo_fields")]
        public KeyValuePair<string, string>[] CustomFields { get; set; }

        /// <summary>
        /// Gets or sets the transaction amount from the request message. 
        /// </summary>
        [JsonProperty(PropertyName = "amt_tran")]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or sets collection of the result of the batch close by currency and location
        /// </summary>
        [JsonProperty(PropertyName = "batch_info")]
        public Batch[] BatchInfo { get; set; }
    }

    /// <summary>
    /// Represents a result of the batch
    /// </summary>
    public class Batch
    {
        /// <summary>
        /// Gets or sets a profile identifier. 
        /// </summary>
        [JsonProperty(PropertyName = "profile_id")]
        public string ProfileId { get; set; }

        /// <summary>
        /// Gets or sets a failure comment. 
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or sets a batch number. 
        /// </summary>
        [JsonProperty(PropertyName = "batch_number")]
        public int BatchId { get; set; }

        /// <summary>
        /// Gets or sets the total number of transactions
        /// </summary>
        [JsonProperty(PropertyName = "cnt_total")]
        public int TransactionTotal { get; set; }

        /// <summary>
        /// Gets or sets the ISO numeric currency code for the transaction. 
        /// </summary>
        [JsonProperty(PropertyName = "tran_currency")]
        public int CurrencyIsoCode { get; set; }

        /// <summary>
        /// Gets or sets purchases minus returns(can be a negative number).
        /// </summary>
        [JsonProperty(PropertyName = "amt_total")]
        public decimal Amount { get; set; }
    }

    /// <summary>
    /// Represents enumeration of Qualpay payment gateway response codes
    /// </summary>
    public enum ResponseCode
    {
        /// <summary>
        /// The request was successful
        /// </summary>
        [EnumMember(Value = "000")]
        Success,

        /// <summary>
        /// The request was invalid
        /// </summary>
        [EnumMember(Value = "100")]
        BadRequest,

        /// <summary>
        /// The credentials provided do not match the on-file values for the merchant
        /// </summary>
        [EnumMember(Value = "101")]
        InvalidCredentials,

        /// <summary>
        /// The transaction ID value could not be linked to a valid transaction
        /// </summary>
        [EnumMember(Value = "102")]
        InvalidtransactionId,

        /// <summary>
        /// The request was missing valid cardholder data
        /// </summary>
        [EnumMember(Value = "103")]
        MissingCardholderData,

        /// <summary>
        /// The request was either missing the amount or the value provided was invalid
        /// </summary>
        [EnumMember(Value = "104")]
        InvalidTransactionAmount,

        /// <summary>
        /// The request was missing authorization code.
        /// </summary>
        [EnumMember(Value = "105")]
        MissingAuthorizationCode,

        /// <summary>
        /// Invalid AVS data
        /// </summary>
        [EnumMember(Value = "106")]
        InvalidAvsData,

        /// <summary>
        /// The expiration date provided in the request was not properly formatted
        /// </summary>
        [EnumMember(Value = "107")]
        InvalidExpirationDate,

        /// <summary>
        /// The card number in the request message was non-numeric or contained either too few or too many digits
        /// </summary>
        [EnumMember(Value = "108")]
        InvalidCardNumber,

        /// <summary>
        /// There are any field exceeds the maximum allowed length
        /// </summary>
        [EnumMember(Value = "109")]
        FieldLengthValidationFailed,

        /// <summary>
        /// There are any of the dynamic DBA fields and the merchant has not been approved for dynamic DBA
        /// </summary>
        [EnumMember(Value = "110")]
        DynamicDbaNotNllowed,

        /// <summary>
        /// Unreferenced credit is submitted and the merchant is not authorized to process credits
        /// </summary>
        [EnumMember(Value = "111")]
        CreditsNotAllowed,

        /// <summary>
        /// Customer already exists or required customer fields are not included
        /// </summary>
        [EnumMember(Value = "112")]
        InvalidCustomerData,

        /// <summary>
        /// The transaction has already been captured or voided
        /// </summary>
        [EnumMember(Value = "401")]
        Voidfailed,

        /// <summary>
        /// The transaction has already been refunded, the original transaction has not been captured, 
        /// the total amount of all refunds exceeds the original transaction amount or the original transaction was not a sale
        /// </summary>
        [EnumMember(Value = "402")]
        RefundFailed,

        /// <summary>
        /// The amount exceeds the authorized amount (except when the merchant category code allows tips), 
        /// the transaction has already been captured or the authorization has been voided
        /// </summary>
        [EnumMember(Value = "403")]
        CaptureFailed,

        /// <summary>
        /// Batch close failed
        /// </summary>
        [EnumMember(Value = "404")]
        BatchCloseFailed,

        /// <summary>
        /// Tokenization failed
        /// </summary>
        [EnumMember(Value = "405")]
        TokenizationFailed,

        /// <summary>
        /// The authorization request timed out without returning a response.
        /// </summary>
        [EnumMember(Value = "998")]
        Timeout,

        /// <summary>
        /// The payment gateway application encountered an unexpected error while processing the request
        /// </summary>
        [EnumMember(Value = "999")]
        InternalError
    }

    #endregion
}
